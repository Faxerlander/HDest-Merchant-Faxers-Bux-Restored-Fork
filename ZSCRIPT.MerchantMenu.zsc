class ItemsFrame : MerchMenuFrame
{
	MerchantShopMenu ParentMenu;

	override void Drawer()
	{
		int BoxSize = 30;

		for (int i = 0; i < ParentMenu.ItemsInCategory.Size(); ++i)
		{
			// [Ace] I'm not too sure where else to put this.
			if (!ParentMenu.ItemsInCategory[i])
			{
				ParentMenu.ItemsInCategory.Delete(i);
				ParentMenu.SelItemIndex = max(0, i - 1);
				continue;
			}
			vector2 DrawPos = (0, (BoxSize + MerchantShopMenu.Spacing) * i);
			vector2 DrawSize = (box.size.x, BoxSize);
			DrawStoreItem(players[consoleplayer].mo, ParentMenu.ItemsInCategory[i], DrawPos, DrawSize, i == ParentMenu.SelItemIndex);
		}
	}

	private ui void DrawStoreItem(PlayerPawn plr, StoreItem item, vector2 pos, vector2 size, bool selected)
	{
		Color DimColor = selected ? Color(60, 35, 20) : Color(0, 0, 0);

		// ----- ICON -----
		
		Fill((0, pos.y), (size.y * 2, size.y), DimColor, 0.75);

		TextureID ItemIcon = TexMan.CheckForTexture(item.GetIcon(), TexMan.Type_Any);
		vector2 ItemIconSize = TexMan.GetScaledSize(ItemIcon);
		double ItemIconScale = 1.0 / MerchantShopMenu.GetBoxedScale(ItemIconSize, (size.y * 2, size.y) * 0.8);
		ItemIconSize *= ItemIconScale;
		vector2 ItemIconPos = ((size.y * 2 - ItemIconSize.x) / 2, pos.y + (size.y - ItemIconSize.y) / 2);
		DrawImage(ItemIconPos, item.GetIcon(), true, (ItemIconScale, ItemIconScale));

		// ----- NAME & FLAVOR TEXT -----

		pos.x += size.y * 2 + MerchantShopMenu.Spacing;
		double ContentW = size.x - (size.y * 3 + MerchantShopMenu.Spacing * 2);
		Fill(pos, (ContentW, size.y), DimColor, 0.75);

		vector2 ContentPos = pos + (1.5, 1.5);
		int Amount = item.GetAmount();
		string DisplayName = (Amount > 1 ? "\c[White]"..Amount.."\c- " : "")..item.GetDisplayName().."\c[Yellow] ("..item.StoreAmount.." remaining)\c-";
		DrawText(ContentPos, SmallFont, DisplayName, Font.CR_GREEN, MerchantShopMenu.TextScale);

		BrokenLines FlavorLines = ConFont.BreakLines(item.GetFlavorText(), int(size.x - (size.y * 3 + MerchantShopMenu.Spacing * 2 + 5)));
		int LinesCount = FlavorLines.Count();
		ContentPos.y += ((ConFont.GetHeight() + 1) * MerchantShopMenu.TextScale) * 2;
		for (int i = LinesCount - 1; i >= 0; --i)
		{
			DrawText(ContentPos, ConFont, FlavorLines.StringAt(i), Font.CR_DARKGRAY, MerchantShopMenu.TextScale);
			ContentPos.y -= ConFont.GetHeight() * MerchantShopMenu.TextScale;
		}

		pos.x += ContentW + MerchantShopMenu.Spacing;

		// ----- PRICE -----

		Fill(pos, (size.y, size.y), DimColor, 0.75);

		StoreCurrency Currency = ParentMenu.Handler.StoreCurrencies[ParentMenu.SelCurrencyIndex];
		string CurIconString = Currency.GetIcon();
		TextureID CurIcon = TexMan.CheckForTexture(CurIconString, TexMan.Type_Any);
		vector2 CurIconSize = TexMan.GetScaledSize(CurIcon);
		double IconScale = 1.0 / MerchantShopMenu.GetBoxedScale(CurIconSize, (20, 14));
		CurIconSize *= IconScale;
		vector2 CurIconPos = (pos.x + size.y / 2 - CurIconSize.x / 2, pos.y + 8 - CurIconSize.y / 2);
		DrawImage(CurIconPos, CurIconString, true, (IconScale, IconScale));

		int Price = StoreItem.GetAdjustedPrice(item, Currency);
		string DisplayPrice = (Price <= plr.CountInv(Currency.GetCurrencyClass()) ? "\c[White]" : "\c[Red]")..Price.."\c-";
		vector2 CurrencyTextPos = (pos.x + size.y / 2 - (SmallFont.StringWidth(DisplayPrice) / 2) * MerchantShopMenu.TextScale, pos.y + size.y - SmallFont.GetHeight() * MerchantShopMenu.TextScale - 1);
		DrawText(CurrencyTextPos, SmallFont, DisplayPrice, Font.CR_UNTRANSLATED, MerchantShopMenu.TextScale);
	}
}

class ShopFrame : MerchMenuFrame
{
	MerchantShopMenu ParentMenu;

	override void Drawer()
	{
		Super.Drawer();

		int CurrencyWidth = 35;

		Fill((0, 0), (box.size.x - CurrencyWidth - MerchantShopMenu.Spacing, box.size.y), Color(0, 0, 0), 0.75);

		// ----- CATEGORY -----
		string SelCat = ParentMenu.GetSelectedCategory();
		vector2 CatTextPos = ((box.size.x - CurrencyWidth - MerchantShopMenu.Spacing) / 2 - (BigFont.StringWidth(SelCat) / 2) * MerchantShopMenu.TextScale, (box.size.y - (BigFont.GetHeight() - 4)) / 2 * MerchantShopMenu.TextScale);
		DrawText(CatTextPos, BigFont, SelCat, Font.CR_WHITE, MerchantShopMenu.TextScale);

		let PrevArrowImg = TexMan.CheckForTexture("PREVARRW", TexMan.Type_Any);
		vector2 PrevArrowSize = TexMan.GetScaledSize(PrevArrowImg);
		DrawImage((5, (box.size.y - PrevArrowSize.y) / 2), "PREVARRW", true);

		let NextArrowImg = TexMan.CheckForTexture("NEXTARRW", TexMan.Type_Any);
		vector2 NextArrowSize = TexMan.GetScaledSize(NextArrowImg);
		DrawImage((box.size.x - CurrencyWidth - MerchantShopMenu.Spacing - NextArrowSize.x - 5, (box.size.y - NextArrowSize.y) / 2), "NEXTARRW", true);

		// ----- CURRENCY + AMOUNT -----

		Fill((box.size.x - CurrencyWidth, 0), (CurrencyWidth, box.size.y), Color(0, 0, 0), 0.75);

		StoreCurrency Currency = ParentMenu.Handler.StoreCurrencies[ParentMenu.SelCurrencyIndex];
		string CurIconString = Currency.GetIcon();
		TextureID CurIcon = TexMan.CheckForTexture(CurIconString, TexMan.Type_Any);
		vector2 CurIconSize = TexMan.GetScaledSize(CurIcon);
		double IconScale = 1.0 / MerchantShopMenu.GetBoxedScale(CurIconSize, (20, 14));
		CurIconSize *= IconScale;
		vector2 CurIconPos = (box.size.x - CurrencyWidth / 2 - CurIconSize.x / 2, 8 - CurIconSize.y / 2);
		DrawImage(CurIconPos, CurIconString, true, (IconScale, IconScale));

		string CurrencyAmount = String.Format("%i", players[consoleplayer].mo.CountInv(Currency.GetCurrencyClass()));
		vector2 CurrencyTextPos = (box.size.x - CurrencyWidth / 2 - (SmallFont.StringWidth(CurrencyAmount) / 2) * MerchantShopMenu.TextScale, box.size.y - SmallFont.GetHeight() * MerchantShopMenu.TextScale - 1);
		DrawText(CurrencyTextPos, SmallFont, CurrencyAmount, Font.CR_GOLD, MerchantShopMenu.TextScale);
	}
}

class MerchantShopMenu : MerchMenuGenericMenu
{
	MerchantHandler Handler;
	int SelCategoryIndex;
	int SelItemIndex; // [Ace] This is only used within a specific category. Don't bother using it with the full array.
	int SelCurrencyIndex;
	Array<StoreItem> ItemsInCategory;

	const TextScale = 1.0; // [Ace] Not really used anymore, but still here so I don't have to reimplement it if needed.
	const Spacing = 3;

	override void Init(Menu parent)
	{
		Super.Init(parent);

		menuactive = Menu.OnNoPause;
		Handler = MerchantHandler(EventHandler.Find("MerchantHandler"));
		GetItemsInCategory(ItemsInCategory, GetSelectedCategory());

		vector2 VirtRes = (640, 480);
		SetBaseResolution(VirtRes);

		vector2 BasePos = (VirtRes.x * 0.1, 10);

		let SFrame = new("ShopFrame");
		vector2 SSize = (VirtRes.x - BasePos.x * 2, 30);
		SFrame.Init(BasePos, SSize);
		SFrame.ParentMenu = self;
		SFrame.Pack(MainFrame);

		let IFrame = new("ItemsFrame");
		vector2 IPos = (BasePos.x, BasePos.y + SSize.y + Spacing);
		vector2 ISize = (VirtRes.x - BasePos.x * 2, VirtRes.y - BasePos.y * 2 - (SSize.y + Spacing) * 0.90);
		IFrame.Init(IPos, ISize);
		IFrame.ParentMenu = self;
		IFrame.Pack(MainFrame);
	}

	ui string GetSelectedCategory()
	{
		MerchantStore OpenedStore = Handler.Stores[Handler.OpenedStoreIndex[consoleplayer]];
		if (SelCategoryIndex < OpenedStore.Categories.Size())
		{
			return OpenedStore.Categories[SelCategoryIndex];
		}

		return "U DUN GOOF'D, FOO'!";
	}

	private ui void GetItemsInCategory(out Array<StoreItem> items, string category)
	{
		items.Clear();

		MerchantStore OpenedStore = Handler.Stores[Handler.OpenedStoreIndex[consoleplayer]];
		for (int i = 0; i < OpenedStore.StoreItems.Size(); ++i)
		{
			if (OpenedStore.StoreItems[i].GetCategory() == category)
			{
				items.Push(OpenedStore.StoreItems[i]);
			}
		}
	}

	static clearscope double GetBoxedScale(vector2 size, vector2 boxSize)
	{
		return max(size.x / boxSize.x, size.y / boxSize.y);
	}

	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
			case MKEY_Back:
			{
				Close();
				return true;
			}
			case MKEY_Left:
				SelItemIndex = 0;
				if (--SelCategoryIndex < 0)
				{
					SelCategoryIndex = Handler.Stores[Handler.OpenedStoreIndex[consoleplayer]].Categories.Size() - 1;
				}
				GetItemsInCategory(ItemsInCategory, GetSelectedCategory());
				break;
			case MKEY_Right:
				SelItemIndex = 0;
				if (++SelCategoryIndex == Handler.Stores[Handler.OpenedStoreIndex[consoleplayer]].Categories.Size())
				{
					SelCategoryIndex = 0;
				}
				GetItemsInCategory(ItemsInCategory, GetSelectedCategory());
				break;
			case MKEY_Up:
				if (--SelItemIndex < 0)
				{
					SelItemIndex = ItemsInCategory.Size() - 1;
				}
				break;
			case MKEY_Down:
				if (++SelItemIndex == ItemsInCategory.Size())
				{
					SelItemIndex = 0;
				}
				break;
			case MKEY_PageUp:
				if (--SelCurrencyIndex < 0)
				{
					SelCurrencyIndex = Handler.StoreCurrencies.Size() - 1;
				}
				break;
			case MKEY_PageDown:
				if (++SelCurrencyIndex > Handler.StoreCurrencies.Size() - 1)
				{
					SelCurrencyIndex = 0;
				}
				break;
			case MKEY_Enter:
				GetItemsInCategory(ItemsInCategory, GetSelectedCategory());
				if (ItemsInCategory.Size() > 0)
				{
					EventHandler.SendNetworkEvent(String.Format("%s:%s", "HDM_BuyStuff", ItemsInCategory[SelItemIndex].GetClassName()), SelCurrencyIndex);
				}
				break;
		}

		return false;
	}
}