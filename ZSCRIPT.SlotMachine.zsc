class MerchantSlotMachine : Actor
{
	override void Tick()
	{
		if (!Debug)
		{
			Debug = CVar.GetCVar('hdm_debug');
		}
		Super.Tick();
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		for (int i = 0; i < Slots.Size(); ++i)
		{
			let slot = SlotMachineSlot(Spawn("SlotMachineSlot", pos));
			slot.master = self;
			slot.PlaceIndex = i;
			Slots[i] = slot;
		}
	}

	private void RollSlots()
	{
		for (int i = StartSlot; i < Slots.Size(); ++i)
		{
			++Slots[i].RollIndex %= SlotMachineSlot.Weights.Size();
		}

		if (LockTicker++ > CurrentLock && Slots[StartSlot].RollIndex == ChosenSlots[StartSlot])
		{
			ResetLock();
			StartSlot++;

			if (StartSlot == Slots.Size())
			{
				StartSlot = 0;
				CheckPayout();
			}
			else
			{
				A_StartSound("SlotMachine/Stop", 6);
			}
		}
	}

	private int GetFullRowIndex()
	{
		for (int i = 1; i < SlotMachineSlot.Weights.Size(); ++i)
		{
			int num = 0;
			for (int j = 0; j < Slots.Size(); ++j)
			{
				if (Slots[j].RollIndex == i)
				{
					num++;
				}
			}
			if (num == Slots.Size())
			{
				return i;
			}
		}
		return -1;
	}

	private void ResetLock()
	{
		LockTicker = 0;
		CurrentLock = random[smsrand](15, 40);
	}

	private void CheckPayout()
	{
		int wildcards = 0;
		for (int i = 0; i < Slots.Size(); ++i)
		{
			if (Slots[i].RollIndex == 0)
			{
				wildcards++;
			}
		}
		
		double mult = 0;
		string winSound = "SlotMachine/WinRegular";

		switch (wildcards)
		{
			case 1: mult = 1; Results[1]++; break;
			case 2: mult = 2.5; Results[2]++; break;
			case 3: mult = 5; Results[3]++; break;
		}
		if (wildcards == 0)
		{
			switch (GetFullRowIndex())
			{
				case 1: mult = 10; Results[4]++; break;
				case 2: mult = 25; Results[5]++; break;
				case 3: mult = 50; Results[6]++; break;
				case 4: mult = 100; Results[7]++; break;
				case 5: mult = 200; Results[8]++; winSound = "SlotMachine/WinJackpot"; break;
			}
		}
		if (mult == 0)
		{
			Results[0]++;
		}

		if (Debug.GetBool())
		{
			string full = "Times rolled: "..TimesRolled.." -";
			for (int i = 0; i < Results.Size(); ++i)
			{
				full = full.." "..Results[i]..",";
				if (i == Results.Size() - 1)
				{
					full.DeleteLastCharacter();
				}
			}
			Console.Printf(full);
		}
		else
		{
			BucksToWin = int(ceil(InsertedAmmo * mult));
			InsertedAmmo = 0;
			if (BucksToWin > 0)
			{
				A_StartSound(winSound);
				SetStateLabel('WinnerWinnerChickenDinner');
			}
			else
			{
				A_StartSound("vile/pain");
				SetStateLabel('Spawn');
			}
		}
		TimesRolled++;
		DecideNextPayout();
	}

	private void DecideNextPayout()
	{
		for (int i = 0; i < Slots.Size(); ++i)
		{
			int sum = SlotMachineSlot.GetWeightSum();
			int rng = random[smsrand](0, sum);
			for (int j = 0; j < SlotMachineSlot.Weights.Size(); ++j)
			{
				if (rng < SlotMachineSlot.Weights[j])
				{
					ChosenSlots[i] = j;
					break;
				}
				rng -= SlotMachineSlot.Weights[j];
			}
		}
	}

	override bool Used(Actor user)
	{
		if (Distance3D(user) > radius + user.radius + 15 || !InStateSequence(CurState, FindState('Spawn')))
		{
			return false;
		}

		bool add = user.player.cmd.buttons & BT_SPEED;
		if (add || InsertedAmmo == 0)
		{
			int amt = CVar.GetCVar('hdm_slots_bet', user.player).GetInt();
			if (!user.CheckInventory('SevenMilAmmo', amt))
			{
				user.A_Log("You don't have enough 7.76mm ammo.", true);
				return false;
			}
			A_StartSound("misc/casing", 6);
			user.A_TakeInventory('SevenMilAmmo', amt);
			InsertedAmmo += amt;
		}
		if (!add)
		{
			SetStateLabel('Rollerino');
		}

		return true;
	}

	private transient CVar Debug;
	private int TimesRolled;
	private int Results[9];
	private int InsertedAmmo;
	private int BucksToWin;
	private int CurrentLock;
	private int LockTicker;
	private int StartSlot;

	private int ChosenSlots[3];
	private SlotMachineSlot Slots[3];

	Default
	{
		Mass 800;
		Radius 15;
		Height 50;
		+SOLID
		+SLIDESONWALLS
	}

	States
	{
		Spawn:
			SLMC A -1 NoDelay
			{
				ResetLock();
				DecideNextPayout(); // [Ace] Truth is, the game was rigged from the start.
			}
			Stop;
		Rollerino:
			SLMC BC 4;
			SLMC C 0 A_StartSound("weapons/sawidle");
			SLMC C 0 A_StartSound("SlotMachine/Rolling", CHAN_BODY, CHANF_OVERLAP | CHANF_LOOP);
			SLMC CCCCCC 2 RollSlots();
			SLMC CCBB 2 RollSlots();
			SLMC A 2
			{
				for (int i = 0; i < (Debug.GetBool() ? 1000 : 1); ++i)
				{
					RollSlots();
				}
			}
			Wait;
		WinnerWinnerChickenDinner:
			SLMC A 4
			{
				int randMult = max(1, BucksToWin / 150);
				int toDrop = min(random(15, 40) * randMult, BucksToWin);
				Inventory a = Inventory(Spawn('MercenaryBucks', Vec3Offset(0, 0, 12)));
				a.angle = angle + frandom(-15, 15);
				a.A_ChangeVelocity(frandom(1.5, 2.5), 0, 0, CVF_RELATIVE);
				a.Amount = toDrop;
				BucksToWin -= toDrop;

				if (BucksToWin == 0)
				{
					SetStateLabel('Spawn');
					return;
				}
			}
			Loop;
	}
}

class SlotMachineSlot : Actor
{
	override void Tick()
	{
		Super.Tick();
		if (!master)
		{
			Destroy();
			return;
		}
		Warp(master, -5, 7 - 9 * PlaceIndex, master.height - 10, flags: WARPF_NOCHECKPOSITION);
	}

	static int GetWeightSum()
	{
		int sum = 0;
		for (int i = 0; i < SlotMachineSlot.Weights.Size(); ++i)
		{
			sum += SlotMachineSlot.Weights[i];
		}
		return sum;
	}

	static const int Weights[] = { 5, 5, 4, 3, 2, 1 };
	int PlaceIndex;
	int RollIndex;

	Default
	{
		+NOINTERACTION
		+WALLSPRITE
	}

	States
	{
		Spawn:
			SLMS A 1
			{
				frame = RollIndex;
			}
			Loop;
	}
}